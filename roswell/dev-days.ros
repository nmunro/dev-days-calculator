#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -L sbcl-bin -- $0 "$@"
|#

(ros:ensure-asdf)
(funcall (intern "LOAD-SYSTEM" :asdf) '#:dev-days-calculator)

(defpackage #:ros/script/dev-days
  (:use #:cl)
  (:export #:main))

(in-package #:ros/script/dev-days)

(defun usage ()
  (format t "Usage: dev-days [--mins N] [--hours N] [--days N] [--help]~%~%
Examples:~%
  dev-days --mins 30~%
  dev-days --hours 2 --mins 30~%
  dev-days --days 1 --hours 4~%"))

(defun parse-number-safe (s)
  "Parse integer/float from S (string designator). Return NIL on failure."
  (handler-case
      (let* ((str (princ-to-string s))
             (obj (read-from-string str)))
        (when (numberp obj) obj))
    (error () nil)))

(defun main (&rest argv)
  (let ((mins 0) (hours 0) (days 0))
    ;; simple argv parser (coerce any token to string safely)
    (labels ((tok (i) (and (< i (length argv)) (nth i argv)))
             (tokstr (i) (and (tok i) (princ-to-string (tok i)))))
      (loop for i from 0 below (length argv) do
            (let* ((raw (tok i))
                   (a   (and raw (string-downcase (princ-to-string raw)))))
              (cond
                ((or (string= a "--help") (string= a "-h"))
                 (usage) (return-from main 0))

                ((or (string= a "--mins") (string= a "-m"))
                 (setf mins (or (parse-number-safe (tokstr (incf i))) 0)))

                ((or (string= a "--hours") (string= a "-H"))
                 (setf hours (or (parse-number-safe (tokstr (incf i))) 0)))

                ((or (string= a "--days") (string= a "-d"))
                 (setf days (or (parse-number-safe (tokstr (incf i))) 0)))

                ((and (= (length argv) 1))
                 (let ((n (parse-number-safe raw)))
                   (when n (setf mins n))))))))

    (let ((result (dev-days-calculator:main :mins mins :hours hours :days days)))
      (format t "~,2f work day(s)~%" result)
      (finish-output)
      0)))
